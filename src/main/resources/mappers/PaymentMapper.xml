<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mev.films.mappers.interfaces.PaymentMapper">

    <resultMap id="paymentDTO" type="com.mev.films.model.PaymentDTO">
        <id property="id" column="id"/>
        <result property="totalPrice" column="totalPrice"/>
        <result property="time" column="time"/>
        <association property="userDTO" resultMap="com.mev.films.mappers.interfaces.UserMapper.userDTO" columnPrefix="usr_"/>
        <association property="filmDTO" resultMap="com.mev.films.mappers.interfaces.FilmMapper.filmDTO" columnPrefix="flm_"/>
        <association property="discountDTO" resultMap="com.mev.films.mappers.interfaces.DiscountMapper.discountDTO" columnPrefix="dsc_"/>
    </resultMap>

    <resultMap id="userDTO" type="com.mev.films.model.UserDTO">
        <id property="id" column="id"/>
        <result property="login" column="login"/>
        <result property="median" column="median"/>
    </resultMap>

    <select id="selectPayments" resultMap="paymentDTO">
        SELECT
            p.id AS id,
            p.time AS time,
            p.total_price AS totalPrice,

            p.user_id AS usr_id,
            u.login AS usr_login,

            p.film_id AS flm_id,
            f.name AS flm_name,
            f.genre AS flm_genre,
            f.duration AS flm_duration,
            f.price AS flm_price,
            f.image AS flm_image,

            p.discount_id AS dsc_id,
            d.code AS dsc_code,
            d.value AS dsc_value
        FROM
            payments AS p
            INNER JOIN users AS u ON p.user_id = u.id
            INNER JOIN films AS f ON p.film_id = f.id
            LEFT JOIN discounts AS d ON p.discount_id = d.id
    </select>

    <select id="selectPaymentsByUser" parameterType="map" resultMap="paymentDTO">
        SELECT
            p.id AS id,
            p.time AS time,
            p.total_price AS totalPrice,

            p.user_id AS usr_id,
            u.login AS usr_login,

            p.film_id AS flm_id,
            f.name AS flm_name,
            f.genre AS flm_genre,
            f.duration AS flm_duration,
            f.price AS flm_price,
            f.image AS flm_image,

            p.discount_id AS dsc_id,
            d.code AS dsc_code,
            d.value AS dsc_value
        FROM
            payments AS p
            INNER JOIN users AS u ON p.user_id = u.id
            INNER JOIN films AS f ON p.film_id = f.id
            LEFT JOIN discounts AS d ON p.discount_id = d.id
        WHERE
            p.user_id = #{0}
    </select>

    <select id="selectPaymentsByFilm" parameterType="map" resultMap="paymentDTO">
        SELECT
            p.id AS id,
            p.time AS time,
            p.total_price AS totalPrice,

            p.user_id AS usr_id,
            u.login AS usr_login,

            p.film_id AS flm_id,
            f.name AS flm_name,
            f.genre AS flm_genre,
            f.duration AS flm_duration,
            f.price AS flm_price,
            f.image AS flm_image,

            p.discount_id AS dsc_id,
            d.code AS dsc_code,
            d.value AS dsc_value
        FROM
            payments AS p
            INNER JOIN users AS u ON p.user_id = u.id
            INNER JOIN films AS f ON p.film_id = f.id
            LEFT JOIN discounts AS d ON p.discount_id = d.id
        WHERE
            p.film_id = #{0}
    </select>

    <select id="selectPayment" parameterType="map" resultMap="paymentDTO">
        SELECT
            p.id AS id,
            p.time AS time,
            p.total_price AS totalPrice,

            p.user_id AS usr_id,
            u.login AS usr_login,

            p.film_id AS flm_id,
            f.name AS flm_name,
            f.genre AS flm_genre,
            f.duration AS flm_duration,
            f.price AS flm_price,
            f.image AS flm_image,

            p.discount_id AS dsc_id,
            d.code AS dsc_code,
            d.value AS dsc_value
        FROM
            payments AS p
            INNER JOIN users AS u ON p.user_id = u.id
            INNER JOIN films AS f ON p.film_id = f.id
            LEFT JOIN discounts AS d ON p.discount_id = d.id
        WHERE
            p.id = #{0}
    </select>

    <select id="selectUsersPayingAboveMedianForLastMonth" parameterType="map" resultMap="userDTO">
        SELECT
            u2.id,
            u2.login,
            avg(p2.bought) AS median
        FROM
            users AS u2
            INNER JOIN (
                SELECT
                    u.id,
                    u.login,
                    p.time,
                    sum(p.total_price) AS bought
                FROM
                    users as u
                    INNER JOIN payments AS p ON u.id = p.user_id
                WHERE
                    extract(MONTH FROM p.time) = #{0}
                GROUP BY
                    u.id, u.login, p.time
            ) AS p2 ON u2.id = p2.id
        GROUP BY
            u2.id, u2.login
        HAVING
            avg(p2.bought) > (SELECT
                                  avg(payments.total_price)
                              FROM
                                  payments)
        ORDER BY
            avg(p2.bought) DESC
    </select>

    <insert id="insertPayment" parameterType="com.mev.films.model.PaymentDTO">
        INSERT INTO
            payments (user_id, film_id, discount_id, total_price, time)
        VALUES (#{userDTO.id}, #{filmDTO.id}, #{discountDTO.id}, #{totalPrice}, #{time});
    </insert>

    <delete id="deletePayment" parameterType="map">
        DELETE FROM
            "postgres-test".public.payments
        WHERE
            id = #{0}
    </delete>
</mapper>